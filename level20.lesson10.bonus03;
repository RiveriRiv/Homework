import java.util.ArrayList;
import java.util.List;

/* Кроссворд
1. Дан двумерный массив, который содержит буквы английского алфавита в нижнем регистре.
2. Метод detectAllWords должен найти все слова из words в массиве crossword.
3. Элемент(startX, startY) должен соответствовать первой букве слова, элемент(endX, endY) - последней.
text - это само слово, располагается между начальным и конечным элементами
4. Все слова есть в массиве.
5. Слова могут быть расположены горизонтально, вертикально и по диагонали как в нормальном, так и в обратном порядке.
6. Метод main не участвует в тестировании
*/
public class Solution {
    public static Course trueCourse;
    public static void main(String[] args) {
        int[][] crossword = new int[][]{
                {'f', 'd', 'e', 'r', 'l', 'k'},
                {'u', 's', 'a', 'm', 'e', 'o'},
                {'l', 'n', 'g', 'r', 'o', 'v'},
                {'m', 'l', 'p', 'r', 'r', 'h'},
                {'p', 'o', 'e', 'e', 'j', 'j'}
        };
        List<Word> words = detectAllWords(crossword, "hooe", "same", "emoh", "emas", "fderlk", "klredf", "fulmp", "poeejj", "jjeeop",
                "pmlif", "kovhj", "jhvok", "lprr", "rrpl", "lprr", "o", "test", "eo", "oe", " ");
        for (Word word : words) {
            System.out.println(word);
        }
        /*
Ожидаемый результат
home - (5, 3) - (2, 0)
same - (1, 1) - (4, 1)
         */
    }

    public static List<Word> detectAllWords(int[][] crossword, String... words) {
        List<Word> list = new ArrayList<Word>();
        for (String word : words) {
            int startX;
            int startY;
            int endX;
            int endY;
            char [] chars = word.toCharArray();
            char letter = chars[0];
            for (int i = 0; i < crossword.length; i++) {
                for (int j = 0; j < crossword[i].length; j++) {
                    if (crossword[i][j]==letter) {
                        if (isFirstLetterAndWriteCourse(crossword, i, j, word)) {
                            startX = i;
                            startY = j;
                            endX = i + trueCourse.getX() * (word.length() - 1);
                            endY = j + trueCourse.getY() * (word.length() - 1);
                            Word str = new Word(word);
                            str.setStartPoint(startY, startX);
                            str.setEndPoint(endY, endX);
                            list.add(str);
                        }
                    }
                }
            }
        }
        return list;
    }

    public static boolean isFirstLetterAndWriteCourse(int[][] crossword, int x, int y, String word) {
        List<Course> courses = new ArrayList<Course>();
        courses.add(new Course(0,1));
        courses.add(new Course(1,1));
        courses.add(new Course(1,0));
        courses.add(new Course(0,-1));
        courses.add(new Course(-1,-1));
        courses.add(new Course(-1,0));
        courses.add(new Course(1,-1));
        courses.add(new Course(-1,1));
        char[] letters = word.toCharArray();
        for (Course course : courses) {
            int X = x;
            int Y = y;
            try {
                for (int i = 0; i < letters.length; i++) {
                    if ((char)crossword[X][Y] == letters[i]) {
                        trueCourse = course;
                        if (i==letters.length-1) {
                            return true;
                        }
                    } else {
                        break;
                    }
                    X = X + course.getX();
                    Y = Y + course.getY();
                }
            } catch(Exception e) {
                continue;
            }
        }
        return false;
    }

    public static class Course{
        private int x;
        private int y;
        public Course(int x, int y) {
            this.x = x;
            this.y = y;
        }
        public int getX() {
            return this.x;
        }
        public int getY() {
            return this.y;
        }
    }

    public static class Word {
        private String text;
        private int startX;
        private int startY;
        private int endX;
        private int endY;

        public Word(String text) {
            this.text = text;
        }

        public void setStartPoint(int i, int j) {
            startX = i;
            startY = j;
        }

        public void setEndPoint(int i, int j) {
            endX = i;
            endY = j;
        }

        @Override
        public String toString() {
            return String.format("%s - (%d, %d) - (%d, %d)", text, startX, startY, endX, endY);
        }
    }
}
